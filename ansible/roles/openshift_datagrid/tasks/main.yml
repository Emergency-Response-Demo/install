---

- name: check if datagrid operator is deployed
  oc_obj:
    state: list
    oc_binary: "{{ openshift_cli }}"
    name: "{{ datagrid_operator_name }}"
    namespace: "{{ namespace }}"
    kind: deployment
  register: resource_status

- block:

  - name: "copy {{ resources_dir }}/datagrid_operatorgroup.yml"
    template:
      src: "{{ resources_dir }}/datagrid_operatorgroup.yml"
      dest: "{{ work_dir }}/datagrid-operatorgroup.yml"

  - name: "Create operatorgroup in {{ namespace }}"
    oc_obj:
      state: present
      oc_binary: "{{ openshift_cli }}"
      name: "{{ datagrid_operatorgroup_name }}"
      namespace: "{{ namespace }}"
      kind: operatorgroup
      files:
        - "{{ work_dir }}/datagrid-operatorgroup.yml"

  - name: get currentCSV for default channel
    shell: |-
      {{ openshift_cli }} get packagemanifests {{ datagrid_operator_package_name }} -o jsonpath='{.status.channels[?(@.name == "{{ datagrid_defaultchannel }}")].currentCSV}'
    register: datagrid_currentCSV

  - name: "copy {{ resources_dir }}/datagrid_subscription.yml"
    template:
      src: "{{ resources_dir }}/datagrid_subscription.yml"
      dest: "{{ work_dir }}/datagrid-subscription.yml"
    vars:
      datagrid_operator_channel: "{{ datagrid_defaultchannel }}"
      datagrid_operator_startingcsv: "{{ datagrid_currentCSV.stdout }}"

  - name: "Create datagrid subscription"
    oc_obj:
      state: present
      oc_binary: "{{ openshift_cli }}"
      name: "{{ datagrid_subscription_name }}"
      namespace: "{{ namespace }}"
      kind: subscription
      files:
        - "{{ work_dir }}/datagrid-subscription.yml"

  - name: "Wait until datagrid operator is active"
    shell: "{{ openshift_cli }} get deployment {{ datagrid_operator_name }} -o template --template={{ json_template }} -n {{ namespace }}"
    vars:
      json_template: '\{\{.status.readyReplicas\}\}'
    register: result
    until: result.stdout == "1"
    retries: 30
    delay: 10
    changed_when: false

  when: >
    resource_status.ansible_module_results.stderr is defined and resource_status.ansible_module_results.stderr != ""

# deploy datagrid
- name: check if datagrid is deployed
  oc_obj:
    state: list
    oc_binary: "{{ openshift_cli }}"
    name: "{{ datagrid_application_name }}"
    namespace: "{{ namespace }}"
    kind: infinispan
  register: resource_status

- set_fact:
    register_infinispan: "{{ resource_status.ansible_module_results.results[0].status.conditions[0].status }}" 
  when: resource_status.ansible_module_results.results[0].status is defined

- block:

  # set infinispan user credentials
  - name: "copy {{ resources_dir }}/connect_secret.yml "
    template:
      src: "{{ resources_dir }}/connect_secret.yml"
      dest: "{{ work_dir }}/connect_secret.yml"

  - name: "Create infinispan secret"
    oc_obj:
      state: present
      oc_binary: "{{ openshift_cli }}"
      name: "{{ datagrid_connect_secret }}"
      namespace: "{{ namespace }}"
      kind: secret
      files:
        - "{{ work_dir }}/connect_secret.yml"

  - name: "copy {{ resources_dir }}/datagrid_cr.yml "
    template:
      src: "{{ resources_dir }}/datagrid_cr.yml"
      dest: "{{ work_dir }}/datagrid-cr.yml"

  - name: "Create infinispan"
    oc_obj:
      state: present
      oc_binary: "{{ openshift_cli }}"
      name: "{{ datagrid_application_name }}"
      namespace: "{{ namespace }}"
      kind: infinispan
      files:
        - "{{ work_dir }}/datagrid-cr.yml"

  - name: "wait until infinispan statefulset has started, replicas = {{ number_of_replicas }}"
    shell: |
      {{ openshift_cli }} get statefulset {{ datagrid_application_name }} -o template --template={{ json_template }} -n {{ namespace }}
    vars:
      json_template: '\{\{.status.currentReplicas\}\}'
    register: infinispan_set_status
    until: infinispan_set_status.stdout == number_of_replicas
    retries: 15
    delay: 15 

  when: >
    register_infinispan is not defined or
    register_infinispan is none or
    register_infinispan != True
