---

- name: "create operatorgroup in {{ namespace }}"
  import_role:
    name: operatorgroup
  vars:
    operatorgroup_name: "{{ namespace }}"
    operatorgroup_namespace: "{{ namespace }}"
    operatorgroup_target_namespace: "{{ namespace }}"

- name: "deploy prometheus operator in {{ namespace }}"
  import_role:
    name: operator_olm
  vars:
    operator_name: prometheus-operator
    packagemanifest: "{{ prometheus_operator_packagemanifest }}"
    subscription_channel: "{{ prometheus_operator_subscription_channel }}"
    subscription_namespace: "{{ namespace }}"
    subscription_name: "{{ prometheus_operator_subscription_name }}"
    automatic_installplan_approval: "{{ prometheus_operator_subscription_automatic_installplan_approval }}"
    subscription_starting_csv: "{{ prometheus_operator_subscription_starting_csv }}"
    csv_prefix: "{{ prometheus_operator_csv_prefix }}"

- name: "wait until prometheus operator is active"
  oc_obj:
    state: list
    oc_binary: "{{ openshift_cli }}"
    kind: Deployment
    name: "{{ prometheus_operator_deployment_name }}"
    namespace: "{{ namespace }}"
  register: r_prometheus_operator_deployment
  retries: 30
  delay: 10
  changed_when: false
  until:
    - r_prometheus_operator_deployment.ansible_module_results.results[0].status.readyReplicas is defined
    - r_prometheus_operator_deployment.ansible_module_results.results[0].status.replicas is defined
    - >-
      r_prometheus_operator_deployment.ansible_module_results.results[0].status.readyReplicas ==
      r_prometheus_operator_deployment.ansible_module_results.results[0].status.replicas

- name: "copy prometheus service account template"
  template:
    src: "{{ resources_dir }}/{{ prometheus_serviceaccount_template }}"
    dest: "{{ work_dir }}/{{ prometheus_serviceaccount_template }}"

- name: "deploy prometheus service account"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ prometheus_serviceaccount_name }}"
    namespace: "{{ namespace }}"
    kind: serviceaccount
    files:
      - "{{ work_dir }}/{{ prometheus_serviceaccount_template }}"

- name: "define random value for oauth session"
  set_fact:
    prometheus_oauth_session: "{{ lookup('password', '/dev/null chars=ascii_letters length=43') }}"

- name: "prometheus oauth proxy secret"
  oc_secret:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    name: "{{ prometheus_oauth_proxy_secret }}"
    type: generic
    from_literal:
      session_secret: "{{ prometheus_oauth_session }}"

- name: "copy prometheus service template"
  template:
    src: "{{ resources_dir }}/{{ prometheus_service_template }}"
    dest: "{{ work_dir }}/{{ prometheus_service_template }}"

- name: "deploy prometheus service"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ prometheus_service_name }}"
    namespace: "{{ namespace }}"
    kind: service
    files:
      - "{{ work_dir }}/{{ prometheus_service_template }}"

- name: "copy prometheus route template"
  template:
    src: "{{ resources_dir }}/{{ prometheus_route_template }}"
    dest: "{{ work_dir }}/{{ prometheus_route_template }}"

- name: "deploy prometheus route"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ prometheus_route_name }}"
    namespace: "{{ namespace }}"
    kind: route
    files:
      - "{{ work_dir }}/{{ prometheus_route_template }}"

- name: "copy prometheus custom resource template"
  template:
    src: "{{ resources_dir }}/{{ prometheus_cr_template }}"
    dest: "{{ work_dir }}/{{ prometheus_cr_template }}"

- name: "deploy prometheus cr"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ prometheus_cr_name }}"
    namespace: "{{ namespace }}"
    kind: prometheus
    files:
      - "{{ work_dir }}/{{ prometheus_cr_template }}"   

- name: "deploy grafana operator in {{ namespace }}"
  import_role:
    name: operator_olm
  vars:
    operator_name: grafana-operator
    packagemanifest: "{{ grafana_operator_packagemanifest }}"
    subscription_channel: "{{ grafana_operator_subscription_channel }}"
    subscription_namespace: "{{ namespace }}"
    subscription_name: "{{ grafana_operator_subscription_name }}"
    automatic_installplan_approval: "{{ grafana_operator_subscription_automatic_installplan_approval }}"
    csv_prefix: "{{ grafana_operator_csv_prefix }}"

- name: "wait until grafana operator is active"
  oc_obj:
    state: list
    oc_binary: "{{ openshift_cli }}"
    kind: Deployment
    name: "{{ grafana_operator_deployment_name }}"
    namespace: "{{ namespace }}"
  register: r_grafana_operator_deployment
  retries: 30
  delay: 10
  changed_when: false
  until:
    - r_grafana_operator_deployment.ansible_module_results.results[0].status.readyReplicas is defined
    - r_grafana_operator_deployment.ansible_module_results.results[0].status.replicas is defined
    - >-
      r_grafana_operator_deployment.ansible_module_results.results[0].status.readyReplicas ==
      r_grafana_operator_deployment.ansible_module_results.results[0].status.replicas

- name: "define random value for oauh session"
  set_fact:
    grafana_oauth_session: "{{ lookup('password', '/dev/null chars=ascii_letters length=43') }}"

- name: "grafana outh proxy secret"
  oc_secret:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    name: "{{ grafana_oauth_proxy_secret }}"
    type: generic
    from_literal:
      session_secret: "{{ grafana_oauth_session }}"

- name: "copy grafana datasource template"
  template:
    src: "{{ resources_dir }}/{{ grafana_datasource_template }}"
    dest: "{{ work_dir }}/{{ grafana_datasource_template }}"

- name: "deploy grafana datasource"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ grafana_datasource_name }}"
    namespace: "{{ namespace }}"
    kind: grafanadatasource
    files:
      - "{{ work_dir }}/{{ grafana_datasource_template }}" 

- name: "copy grafana custom resource template"
  template:
    src: "{{ resources_dir }}/{{ grafana_cr_template }}"
    dest: "{{ work_dir }}/{{ grafana_cr_template }}"

- name: "deploy grafana cr"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ grafana_cr_name }}"
    namespace: "{{ namespace }}"
    kind: grafana
    files:
      - "{{ work_dir }}/{{ grafana_cr_template }}" 

- name: "create clusterrole for get namespaces"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: get-namespaces
    kind: clusterrole
    files:
      - "{{ resources_dir }}/{{ clusterrole_get_namespaces_template }}"

- name: "give clusterrole get-namespaces privilege to {{ project_admin }}"
  oc_adm_policy_user:
    state: present
    oc_binary: "{{ openshift_cli }}"
    rolebinding_name: "{{ project_admin }}-get-namespaces"
    resource_kind: cluster-role
    resource_name: get-namespaces
    user: "{{ project_admin }}"

- name: "copy grafana cluster monitoring clusterrole binding template"
  template:
    src: "{{ resources_dir }}/{{ grafana_cluster_monitoring_view_crb_template }}"
    dest: "{{ work_dir }}/{{ grafana_cluster_monitoring_view_crb_template }}"

- name: "grafana cluster monitoring clusterrole binding"
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: present
    kind: clusterrolebinding
    name: "grafana-cluster-monitoring-view-{{ project_admin }}"
    files:
      - "{{ work_dir }}/{{ grafana_cluster_monitoring_view_crb_template }}"
