---

- name: copy imagestream template
  template:
    src: "{{ resources_dir }}/{{ imagestream_template }}"
    dest: "{{ work_dir }}/{{ imagestream_template }}"

- name: create output imagestream in the {{ namespace_tools}} project
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace_tools }}"
    kind: imagestream
    name: "{{ imagestream_name }}"
    files:
      - "{{ work_dir }}/{{ imagestream_template }}"

- name: create output imagestream in the {{ namespace }} project
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    kind: imagestream
    name: "{{ imagestream_name }}"
    files:
      - "{{ work_dir }}/{{ imagestream_template }}"

- name: "give edit permissions to system:serviceaccount:{{ namespace_tools }}:pipeline in project {{ namespace }}"
  oc_adm_policy_user:
    state: present
    oc_binary: "{{ openshift_cli }}"
    rolebinding_name: pipeline-edit
    namespace: "{{ namespace }}"
    resource_kind: role
    user: "system:serviceaccount:{{ namespace_tools }}:pipeline"
    resource_name: edit

- name: copy tekton pvc template
  template:
    src: "{{ resources_dir }}/{{ tekton_workspace_pvc_template }}"
    dest: "{{ work_dir }}/{{ tekton_workspace_pvc_template }}"

- name: "create the {{ tekton_workspace_pvc_name }} pvc in the {{ namespace_tools }} project"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ tekton_workspace_pvc_name }}"
    namespace: "{{ namespace_tools }}"
    kind: pvc
    files:
      - "{{ work_dir }}/{{ tekton_workspace_pvc_template }}"

- set_fact:
    application_image_tag: "latest"

- name: copy application template
  template:
    src: "{{ resources_dir }}/{{ application_template }}"
    dest: "{{ work_dir }}/{{ application_template }}"

- name: check if {{ application_name }} application is deployed
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: list
    namespace: "{{ namespace }}"
    name: "{{ application_name }}"
    kind: dc
  register: result

- name: deploy {{ application_name }} application
  oc_list:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    files:
      - "{{ work_dir }}/{{ application_template }}"
  when: result.ansible_module_results.stderr is defined and result.ansible_module_results.stderr != ""