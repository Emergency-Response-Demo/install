---

- name: set rhsso route
  set_fact:
    sso_url: https://{{ sso_application_name }}-{{ namespace }}.{{ ocp_domain }}

- name: get admin token
  uri:
    url: "{{ sso_url }}/auth/realms/master/protocol/openid-connect/token"
    method: POST
    headers:
      Content-Type: application/x-www-form-urlencoded
    body: "username={{ sso_admin_username }}&password={{ sso_admin_password }}&grant_type=password&client_id=admin-cli"
    status_code: 200
    validate_certs: no
  register: admin_token_result

- name: set admin token fact
  set_fact:
    admin_token: "{{ admin_token_result | json_query('json.access_token') }}"

- name: copy realm template
  template:
    src: "{{ sso_realm_template }}"
    dest: "{{ work_dir }}/{{ sso_realm_id }}.json"

- name: check if {{ sso_realm_id }} exists
  uri:
    url: "{{ sso_url }}/auth/admin/realms/{{ sso_realm_id }}"
    method: GET
    headers:
      Authorization: Bearer {{ admin_token }}
    status_code: 200,404
    validate_certs: no
  register: result
  changed_when: false

- name: delete {{ sso_realm_id }} realm
  uri:
    url: "{{ sso_url }}/auth/admin/realms/{{ sso_realm_id }}"
    method: DELETE
    headers:
      Authorization: Bearer {{ admin_token }}
    status_code: 204
    validate_certs: no
  when: result.status == 200

- name: create {{ sso_realm_id }} realm
  uri:
    url: "{{ sso_url }}/auth/admin/realms"
    method: POST
    headers:
      Authorization: Bearer {{ admin_token }}
      Content-Type: application/json
    body: "{{ lookup('file', work_dir + '/' + sso_realm_id + '.json') }}"
    body_format: json
    status_code: 201
    validate_certs: no

- name: get rhsso realm certs
  uri:
    url: "{{ sso_url }}/auth/realms/{{ sso_realm_id }}/protocol/openid-connect/certs"
    validate_certs: false
    return_content: true
  register: sso_realm_certs
  changed_when: false

- name: extract sso realm cert modulus
  shell: echo "{{ sso_realm_certs.content|from_json|json_query(json_query) }}" | sed s/-/+/g | sed s/_/\\//g
  vars:
    json_query: keys[?kty=='RSA']|[0].n
  register: sso_realm_certs_modulus

- name: extract sso realm cert exponent
  shell: echo "{{ sso_realm_certs.content|from_json|json_query(json_query) }}"
  vars:
    json_query: keys[?kty=='RSA']|[0].e
  register: sso_realm_certs_exponent

- name: extract sso realm public key
  shell: |
    echo {{ sso_realm_certs_exponent.stdout }} | base64 -d > {{ work_dir }}/exponent.bin
    echo '02 03' | xxd -r -p > {{ work_dir }}/mid-header.bin
    echo 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA' | base64 -d > {{ work_dir }}/header.bin
    _m={{ sso_realm_certs_modulus.stdout }}
    _l={{ shell1 }}
    if [ $_l -eq 2 ]; then _s="$_m"'=='
    elif [ $_l -eq 3 ]; then _s="$_m"'='
    else _s="$_m" ; fi
    echo $_s | base64 -d > {{ work_dir }}/modulus.bin
    cat {{ work_dir }}/header.bin {{ work_dir }}/modulus.bin {{ work_dir }}/mid-header.bin {{ work_dir }}/exponent.bin > {{ work_dir }}/key.der
    openssl pkey -inform der -outform pem -pubin -in {{ work_dir }}/key.der -out {{ work_dir }}/key.pem
    echo $(cat {{ work_dir }}/key.pem | tr -d "\n" | sed 's/-----BEGIN PUBLIC KEY-----//' | sed 's/-----END PUBLIC KEY-----//' ) > {{ work_dir }}/sso_public_key.txt
    rm {{ work_dir }}/*.bin {{ work_dir }}/*.der {{ work_dir }}/*.pem
  vars:
    shell1: !unsafe "$((${#_m} % 4))"

- name: delete client configmap
  oc_configmap:
    oc_binary: "{{ openshift_cli }}"
    state: absent
    namespace: "{{ namespace }}"
    name: "{{ sso_config_configmap }}"

- name: create client configmap
  oc_configmap:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    name: "{{ sso_config_configmap }}"
    from_literal:
      AUTH_URL: "{{ sso_url }}/auth"
      KEYCLOAK: "true"
      PUBLIC_KEY: "{{ lookup('file', work_dir + '/sso_public_key.txt') }}"
