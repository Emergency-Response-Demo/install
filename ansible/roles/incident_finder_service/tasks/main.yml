---

- name: "create {{ service_account }} service account for {{ application_name }} application"
  oc_serviceaccount:
    oc_binary: "{{ openshift_cli }}"
    state: present
    name: "{{ service_account }}"
    namespace: "{{ namespace }}"

- name: copy application properties template
  template:
    src: "{{ resources_dir }}/{{ application_properties }}"
    dest: "{{ work_dir }}/{{ application_properties }}"

- name: "create {{ application_configmap }} application configmap"
  oc_configmap:
    oc_binary: "{{ openshift_cli }}"
    state: present
    name: "{{ application_configmap }}"
    namespace: "{{ namespace }}"
    from_file:
      dir: "{{ work_dir }}/{{ application_properties }}"

- name: copy imagestream template
  template:
    src: "{{ resources_dir }}/{{ image_imagestream_template }}"
    dest: "{{ work_dir }}/{{ image_imagestream_template }}"

- name: "create imagestream in the {{ namespace }} project"
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    kind: imagestream
    name: "{{ imagestream_name }}"
    files:
      - "{{ work_dir }}/{{ image_imagestream_template }}"

- set_fact:
    application_image_tag: "{{ incident_aggregation_service_image_tag }}"

- name: copy application template
  template:
    src: "{{ resources_dir }}/{{ application_template }}"
    dest: "{{ work_dir }}/{{ application_template }}"

- name: "check if {{ application_name }} application is deployed"
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: list
    namespace: "{{ namespace }}"
    name: "{{ application_name }}"
    kind: dc
  register: result

- name: "deploy {{ application_name }} application"
  oc_list:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    files:
      - "{{ work_dir }}/{{ application_template }}"
  when: result.ansible_module_results.stderr is defined and result.ansible_module_results.stderr != ""