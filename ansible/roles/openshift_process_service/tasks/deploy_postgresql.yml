---

# configmap
- name: create directory in work dir for configmap files
  file:
    path: "{{ work_dir }}/{{ process_service_postgresql_init_configmap }}"
    state: directory

- name: copy init files to work directory
  copy:
    src: "{{ item }}"
    dest: "{{ work_dir }}/{{ process_service_postgresql_init_configmap }}"
  with_fileglob:
    - "{{ resources_dir }}/postgresql/*.sh"
    - "{{ resources_dir }}/postgresql/sql/*.sql"

- name: "create {{ process_service_postgresql_init_configmap }} configmap"
  oc_configmap:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    name: "{{ process_service_postgresql_init_configmap }}"
    from_file:
      dir: "{{ work_dir }}/{{ process_service_postgresql_init_configmap }}"

- name: copy postgresql template
  template:
    src: "{{ resources_dir }}/{{ process_service_postgresql_template }}"
    dest: "{{ work_dir }}/postgresql.yml"

# deploy postgresql
- name: check if postgresql is deployed
  oc_obj:
    state: list
    oc_binary: "{{ openshift_cli }}"
    name: "{{ process_service_postgresql_service_name }}"
    namespace: "{{ namespace }}"
    kind: dc
  register: result

- name: deploy postgresql
  oc_list:
    state: present
    oc_binary: "{{ openshift_cli }}"
    namespace: "{{ namespace }}"
    files:
      - "{{ work_dir }}/postgresql.yml"

- name: wait until postgresql database is up and running
  shell: "{{ openshift_cli }} get dc {{ process_service_postgresql_service_name }} -o template --template={{ json_template }} -n {{ namespace }}"
  vars:
    json_template: '\{\{.status.readyReplicas\}\}'
  register: result
  until: result.stdout == "1"
  retries: 10
  delay: 30
  changed_when: false