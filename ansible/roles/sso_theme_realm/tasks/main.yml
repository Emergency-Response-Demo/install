---

- name: wait for sso to be ready
  shell: "oc get keycloak/rhsso -o jsonpath='{.status.phase}' -n {{ namespace_sso }}"
  register: result
  until: result.stdout == 'reconcile'
  retries: 50
  delay: 10
  changed_when: False

- name: check whether themes pvc claim exists
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: list
    namespace: "{{ namespace_sso }}"
    name: "{{ sso_theme_pvc }}"
    kind: pvc
  register: result

- block:
    - name: copy the pvc template
      template:
        src: "{{ resources_dir }}/{{ sso_theme_template }}"
        dest: "{{ work_dir }}/{{ sso_theme_template }}" 

    - name: copy the coreui theme to the host
      copy:
        src: "{{ sso_theme_directory }}"
        dest: "{{work_dir}}/themes"
  
    - name: create themes PVC
      oc_obj:
        oc_binary: "{{ openshift_cli }}"
        state: present
        namespace: "{{ namespace_sso }}"
        name: "{{ sso_theme_pvc }}"
        kind: pvc
        files:
          - "{{ work_dir }}/{{ sso_theme_template }}"        

    - name: create theme volume
      shell: "{{ openshift_cli }} set volume dc/sso --add --name=themes-vol -t persistentVolumeClaim --claim-name={{ sso_theme_pvc }} -m /opt/eap/themes/coreui --sub-path=coreui -n {{ namespace_sso }}" 
  
    - name: pause for a few seconds to allow new SSO RC to be created
      pause:
        seconds: 10

    - name: wait until new SSO pod is started
      shell: "{{ openshift_cli }} get dc/sso  -o template --template={{ json_template }} -n {{ namespace_sso }}"
      vars:
        json_template: '\{\{.status.readyReplicas\}\}'
      register: started_result
      until: started_result.stdout == "1"
      retries: 50
      delay: 10
      changed_when: false
  
    - name: get sso pod name
      shell: "{{ openshift_cli }} get pods --selector deploymentConfig=sso -o jsonpath='{.items[0].metadata.name}' -n {{ namespace_sso }}"
      register: sso_pod_name
  
    - name: copy emergency response themes to new PVC
      shell: "{{ openshift_cli }} cp {{work_dir}}/themes/coreui/account {{ sso_pod_name.stdout }}:{{ sso_theme_path }}/coreui -n {{ namespace_sso }}"
    - name: copy emergency response themes to new PVC
      shell: "{{ openshift_cli }} cp {{work_dir}}/themes/coreui/login {{ sso_pod_name.stdout }}:{{ sso_theme_path }}/coreui -n {{ namespace_sso }}"

  when: result.ansible_module_results.stderr is defined and result.ansible_module_results.stderr != ""

- name: retrieve sso route
  shell: "{{ openshift_cli }} get route sso -o jsonpath='{.spec.host}' -n {{ namespace_sso }}"
  register: sso_route_cmd

- name: retrieve sso admin password
  shell: >-
    {{ openshift_cli }} get dc/sso -o jsonpath='{.spec.template.spec.containers[?(@.name=="sso")].env[?(@.name=="SSO_ADMIN_PASSWORD")].value}' -n {{ namespace_sso }}
  register: sso_admin_password_cmd

- name: retrieve sso admin username
  shell: >-
    {{ openshift_cli }} get dc/sso -o jsonpath='{.spec.template.spec.containers[?(@.name=="sso")].env[?(@.name=="SSO_ADMIN_USERNAME")].value}' -n {{ namespace_sso }}
  register: sso_admin_user_cmd

- set_fact:
    sso_route: "https://{{ sso_route_cmd.stdout }}"
    sso_admin_password: "{{ sso_admin_password_cmd.stdout }}"
    sso_admin_user: "{{ sso_admin_user_cmd.stdout }}"

- name: get admin token
  uri:
    url: "{{ sso_route }}/auth/realms/master/protocol/openid-connect/token"
    method: POST
    headers:
      Content-Type: application/x-www-form-urlencoded
    body: "username={{ sso_admin_user }}&password={{ sso_admin_password }}&grant_type=password&client_id=admin-cli"
    status_code: 200
    validate_certs: no
  register: admin_token_result

- name: set admin token fact
  set_fact:
    admin_token: "{{ admin_token_result | json_query('json.access_token') }}"

- name: copy realm template
  template:
    src: "{{ sso_realm_template }}"
    dest: "{{ work_dir }}/{{ sso_realm_id }}.json"

- name: copy incident commander template
  template:
    src: "{{ incident_commander_template }}"
    dest: "{{ work_dir }}/incident-commander-user.json"

- name: copy json to add role to incident commander
  template:
    src: "{{ incident_commander_add_role }}"
    dest: "{{ work_dir }}/add-role-to-incident-commander.json"

- name: check if {{ sso_realm_id }} exists
  uri:
    url: "{{ sso_route }}/auth/admin/realms/{{ sso_realm_id }}"
    method: GET
    headers:
      Authorization: Bearer {{ admin_token }}
    status_code: 200,404
    validate_certs: no
  register: result
  changed_when: false

- name: create {{ sso_realm_id }} realm
  uri:
    url: "{{ sso_route }}/auth/admin/realms"
    method: POST
    headers:
      Authorization: Bearer {{ admin_token }}
      Content-Type: application/json
    body: "{{ lookup('file', work_dir + '/' + sso_realm_id + '.json') }}"
    body_format: json
    status_code: 201
    validate_certs: no
  when: result.status == 404

- name: create incident_commander user
  uri:
    url: "{{ sso_route }}/auth/admin/realms/{{ sso_realm_id }}/users"
    method: POST
    headers:
      Authorization: Bearer {{ admin_token }}
      Content-Type: application/json
    body: "{{ lookup('file', work_dir + '/incident-commander-user.json') }}"
    body_format: json
    status_code: 201,409
    validate_certs: no
  register: commander_creation

- name: set incident commander user id fact
  set_fact: 
    incident_commander_user_id: "{{ commander_creation.location | regex_replace('^.*/users/(.*)$', '\\1') }}"
  when: commander_creation.status == 201

- name: add role to incident_commander user
  uri:
    url: "{{ sso_route }}/auth/admin/realms/{{ sso_realm_id }}/users/{{ incident_commander_user_id }}/role-mappings/realm"
    method: POST
    headers:
      Authorization: Bearer {{ admin_token }}
      Content-Type: application/json
    body: "{{ lookup('file', work_dir + '/add-role-to-incident-commander.json') }}"
    body_format: json
    status_code: 204  
    validate_certs: no
  when: commander_creation.status == 201

- name: get rhsso realm certs
  uri:
    url: "{{ sso_route }}/auth/realms/{{ sso_realm_id }}/protocol/openid-connect/certs"
    validate_certs: false
    return_content: true
  register: sso_realm_certs
  changed_when: false

- name: extract sso realm cert modulus
  shell: echo "{{ sso_realm_certs.content|from_json|json_query(json_query) }}" | sed s/-/+/g | sed s/_/\\//g
  vars:
    json_query: keys[?kty=='RSA']|[0].n
  register: sso_realm_certs_modulus

- name: extract sso realm cert exponent
  shell: echo "{{ sso_realm_certs.content|from_json|json_query(json_query) }}"
  vars:
    json_query: keys[?kty=='RSA']|[0].e
  register: sso_realm_certs_exponent

- name: extract sso realm public key
  shell: |
    echo {{ sso_realm_certs_exponent.stdout }} | base64 -d > {{ work_dir }}/exponent.bin
    echo '02 03' | xxd -r -p > {{ work_dir }}/mid-header.bin
    echo 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA' | base64 -d > {{ work_dir }}/header.bin
    _m={{ sso_realm_certs_modulus.stdout }}
    _l={{ shell1 }}
    if [ $_l -eq 2 ]; then _s="$_m"'=='
    elif [ $_l -eq 3 ]; then _s="$_m"'='
    else _s="$_m" ; fi
    echo $_s | base64 -d > {{ work_dir }}/modulus.bin
    cat {{ work_dir }}/header.bin {{ work_dir }}/modulus.bin {{ work_dir }}/mid-header.bin {{ work_dir }}/exponent.bin > {{ work_dir }}/key.der
    openssl pkey -inform der -outform pem -pubin -in {{ work_dir }}/key.der -out {{ work_dir }}/key.pem
    echo $(cat {{ work_dir }}/key.pem | tr -d "\n" | sed 's/-----BEGIN PUBLIC KEY-----//' | sed 's/-----END PUBLIC KEY-----//' ) > {{ work_dir }}/sso_public_key.txt
    rm {{ work_dir }}/*.bin {{ work_dir }}/*.der {{ work_dir }}/*.pem
  vars:
    shell1: !unsafe "$((${#_m} % 4))"

- name: create client configmap
  oc_configmap:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    name: "{{ sso_config_configmap }}"
    from_literal:
      AUTH_URL: "{{ sso_route }}/auth"
      KEYCLOAK: "true"
      PUBLIC_KEY: "{{ lookup('file', work_dir + '/sso_public_key.txt') }}"
      REALM: "{{ sso_realm_id }}"
      CLIENTID: "{{ sso_clientId }}"
