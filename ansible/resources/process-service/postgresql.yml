---
kind: List
apiVersion: v1
items:
- kind: Service
  apiVersion: v1
  metadata:
    name:  {{ process_service_postgresql_service_name }}
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    labels:
      app: {{ application_name }}
  spec:
    ports:
    - name: postgresql
      protocol: TCP
      port: 5432
      targetPort: 5432
      nodePort: 0
    selector:
      name: {{ process_service_postgresql_service_name }}
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: {{ process_service_postgresql_service_name }}
    labels:
      app: {{ application_name }}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: {{ process_service_postgresql_volume_capacity }}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: {{ process_service_postgresql_service_name }}
    labels:
      app: {{ application_name }}
      app.kubernetes.io/part-of: datatier
  spec:
    strategy:
      recreateParams:
        post:
          execNewPod:
            command: 
            - /bin/bash
            - /tmp/init-files/wait_for_postgresql.sh
            - /tmp/init-files/create_rhpam_database.sh
            containerName: postgresql
            volumes:
            - init-volume
          failurePolicy: Abort
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: "{{ process_service_postgresql_image_stream }}:{{ process_service_postgresql_image_stream_tag }}"
          namespace: {{ process_service_postgresql_image_stream_namespace }}
    - type: ConfigChange
    replicas: 1
    selector:
      name: {{ process_service_postgresql_service_name }}
    template:
      metadata:
        labels:
          name: {{ process_service_postgresql_service_name }}
          app: {{ application_name }}
      spec:
        containers:
        - name: postgresql
          image: " "
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
          livenessProbe:
            timeoutSeconds: 10
            initialDelaySeconds: 120
            exec:
              command:
              - /usr/libexec/check-container
              - --live
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: {{ process_service_postgresql_credentials_secret }}
                key: database-user
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ process_service_postgresql_credentials_secret }}
                key: database-password
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: {{ process_service_postgresql_credentials_secret }}
                key: database-name
          - name: POSTGRESQL_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ process_service_postgresql_credentials_secret }}
                key: database-admin-password   
          - name: POSTGRESQL_SERVICE
            value: {{ process_service_postgresql_service_name }}
          - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
            value: "{{ process_service_postgresql_max_prepared_transactions }}"
          - name: POSTGRESQL_MAX_CONNECTIONS
            value: "{{ process_service_postgresql_max_connections }}"
          resources:
            requests:
              cpu: "{{ process_service_postgresql_resources_requests_cpu }}"
              memory: "{{ process_service_postgresql_resources_requests_memory }}"
            limits:
              cpu: "{{ process_service_postgresql_resources_limits_cpu }}"
              memory: "{{ process_service_postgresql_resources_limits_memory }}"
          volumeMounts:
          - name: "{{ process_service_postgresql_service_name }}-data"
            mountPath: "/var/lib/pgsql/data"
          - name: init-volume
            mountPath: /tmp/init-files
          - name: conf-volume
            mountPath: /opt/app-root/src/postgresql-cfg
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: IfNotPresent
          capabilities: {}
          securityContext:
            capabilities: {}
            privileged: false
        volumes:
        - name: "{{ process_service_postgresql_service_name }}-data"
          persistentVolumeClaim:
            claimName: {{ process_service_postgresql_service_name }}
        - configMap:
            defaultMode: 493
            name: "{{ process_service_postgresql_service_name }}-init"
          name: init-volume
        - configMap:
            defaultMode: 493
            name: {{ process_service_postgresql_configmap }}
          name: conf-volume
        restartPolicy: Always
        dnsPolicy: ClusterFirst
